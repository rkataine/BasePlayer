/* Author: Riku Katainen @ University of Helsinki
 * 
 * Tumor Genomics Group (http://research.med.helsinki.fi/gsb/aaltonen/) 	
 * Contact: riku.katainen@helsinki.fi / help@baseplayer.fi
 * 
 * LICENSE: 
 * 
 * GNU AFFERO GENERAL PUBLIC LICENSE
 * Version 3, 19 November 2007
 *  
 */
package base.BasePlayer;

import htsjdk.samtools.SAMRecord;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JFrame;
import javax.swing.filechooser.FileSystemView;

public class Test {

	 	static HashMap<String, Integer> baseMap = new HashMap<String, Integer>();
	 	static String chrom = "";
		public static void main(String[] args) {
			
			String joo = "1/2:22:0,11,11,0,0,0,0,0,0,0,0,0:1610.19 0/0 0/3:27:22,0,0,5,0,0,0,0,0,0,0,0:25.78 0/0 1/1:12:1,11,0,0,0,0,0,0,0,0,0,0:614.73 0/3:14:11,0,0,3,0,0,0,0,0,0,0,0:30.77 4/4:37:0,0,0,0,37,0,0,0,0,0,0,0:2276.73 0/1:24:3,21,0,0,0,0,0,0,0,0,0,0:1193.19 1/5:13:0,7,0,0,0,6,0,0,0,0,0,0:668.19 0/0 4/4:23:0,0,0,0,23,0,0,0,0,0,0,0:1509.73 5/5:17:0,7,0,0,0,17,0,0,0,0,0,0:826.73 0/2:34:17,11,17,0,0,0,0,0,0,0,0,0:1079.73 2/6:22:0,0,11,0,0,0,11,0,0,0,0,0:1265.19 4/4:23:0,0,0,0,23,0,0,0,0,0,0,0:1097.73 6/7:29:0,0,0,0,0,0,15,14,0,0,0,0:1079.19 4/6:22:0,0,11,0,11,0,11,0,0,0,0,0:752.19 5/5:28:0,7,0,0,0,28,0,0,0,0,0,0:1362.73 1/1:15:0,15,0,0,0,0,0,0,0,0,0,0:1159.73 0/2:23:11,11,12,0,0,0,0,0,0,0,0,0:935.73 1/1:21:0,21,0,0,0,0,0,0,0,0,0,0:1258.73 5/5:26:0,7,0,0,0,26,0,0,0,0,0,0:1201.73 0/1:21:3,18,0,0,0,0,0,0,0,0,0,0:1079.0 0/0 2/2:34:0,11,34,0,0,0,0,0,0,0,0,0:2535.73 5/5:18:0,7,0,0,0,18,0,0,0,0,0,0:911.73 5/5:19:0,7,0,0,0,19,0,0,0,0,0,0:883.73 4/4:25:0,0,0,0,25,0,0,0,0,0,0,0:1769.73 0/2:28:13,11,15,0,0,0,0,0,0,0,0,0:1087.73 5/6:25:0,0,11,0,11,11,14,0,0,0,0,0:698.19 0/0 5/6:21:0,0,11,0,11,6,15,0,0,0,0,0:577.19 0/2:34:15,11,19,0,0,0,0,0,0,0,0,0:1232.73 0/0 0/0 0/1:35:18,17,0,0,0,0,0,0,0,0,0,0:898.73 0/1:18:8,10,0,0,0,0,0,0,0,0,0,0:743.73 8/8:11:0,0,0,0,0,0,0,0,11,0,0,0:834.73 1/1:22:0,22,0,0,0,0,0,0,0,0,0,0:1656.73 0/2:23:9,11,14,0,0,0,0,0,0,0,0,0:975.73 0/2:20:11,11,9,0,0,0,0,0,0,0,0,0:579.73 5/5:27:0,7,0,0,0,27,0,0,0,0,0,0:1257.73 5/5:16:0,7,0,0,0,16,0,0,0,0,0,0:727.73 9/9:12:0,0,0,0,0,0,0,0,0,12,0,0:773.73 7/7:39:0,0,0,0,0,0,15,39,0,0,0,0:2660.73 0/2:26:13,11,13,0,0,0,0,0,0,0,0,0:820.73 5/5:16:0,7,0,0,0,16,0,0,0,0,0,0:666.73 7/7:16:0,0,0,0,0,0,15,16,0,0,0,0:909.73 5/5:28:0,7,0,0,0,28,0,0,0,0,0,0:1257.73 5/5:29:0,7,0,0,0,29,0,0,0,0,0,0:1382.73 0/5:22:4,7,0,0,0,18,0,0,0,0,0,0:920.73 6/6:23:0,0,11,0,11,6,23,0,0,0,0,0:649.73 4/4:21:0,0,0,0,21,0,0,0,0,0,0,0:1226.73 0/5:22:11,7,0,0,0,11,0,0,0,0,0,0:568.73 0/2:24:12,11,12,0,0,0,0,0,0,0,0,0:771.73 0/6:23:2,0,11,0,11,6,21,0,0,0,0,0:500.84 7/7:12:0,0,0,0,0,0,15,12,0,0,0,0:632.73 0/2:19:11,11,8,0,0,0,0,0,0,0,0,0:403.73 0/2:24:9,11,15,0,0,0,0,0,0,0,0,0:1128.73 5/7:25:0,0,0,0,0,10,15,15,0,0,0,0:733.19 2/5:31:0,7,14,0,0,17,0,0,0,0,0,0:1830.19 2/7:26:0,0,14,0,0,10,15,12,0,0,0,0:1625.19 1/1:15:0,15,0,0,0,0,0,0,0,0,0,0:882.73 6/6:38:1,0,11,0,11,6,37,0,0,0,0,0:1312.73 0/0 0/2:21:9,11,12,0,0,0,0,0,0,0,0,0:752.73 1/1:18:0,18,0,0,0,0,0,0,0,0,0,0:1278.73 2/5:34:0,7,20,0,0,14,0,0,0,0,0,0:2219.19 0/0 0/10:37:10,0,0,0,0,0,0,0,0,0,27,0:871.73 0/0 0/2:26:13,11,13,0,0,0,0,0,0,0,0,0:893.73 0/0 0/1:24:12,12,0,0,0,0,0,0,0,0,0,0:785.73 6/6:20:1,0,11,0,11,6,19,0,0,0,0,0:433.25 4/4:27:0,0,0,0,27,0,0,0,0,0,0,0:1468.73 0/1:14:3,11,0,0,0,0,0,0,0,0,0,0:488.82 1/6:23:0,11,11,0,11,6,12,0,0,0,0,0:1011.19 6/6:24:0,11,11,0,11,6,24,0,0,0,0,0:720.73 5/7:21:0,0,14,0,0,15,15,6,0,0,0,0:584.19 0/3:34:28,0,0,6,0,0,0,0,0,0,0,0:47.77 1/1:27:2,25,0,0,0,0,0,0,0,0,0,0:1527.74 0/0 0/2:15:6,11,9,0,0,0,0,0,0,0,0,0:518.73 6/6:25:0,11,11,0,11,6,25,0,0,0,0,0:628.73 1/1:17:0,17,0,0,0,0,0,0,0,0,0,0:1010.73 7/7:26:0,0,14,0,0,15,15,26,0,0,0,0:1362.73 6/6:23:0,11,11,0,11,6,23,0,0,0,0,0:512.76 4/4:19:0,0,0,0,19,0,0,0,0,0,0,0:1130.73 0/0 5/5:19:0,7,20,0,0,19,0,0,0,0,0,0:823.73 6/6:19:1,11,11,0,11,6,18,0,0,0,0,0:521.84 5/7:27:0,0,14,0,0,16,15,11,0,0,0,0:798.19 6/6:25:0,11,11,0,11,6,25,0,0,0,0,0:665.73 6/7:20:0,0,14,0,0,16,10,10,0,0,0,0:665.19 4/5:23:0,7,20,0,8,15,0,0,0,0,0,0:1057.19 0/6:32:9,11,11,0,11,6,23,0,0,0,0,0:770.73 0/2:26:12,11,14,0,0,0,0,0,0,0,0,0:968.73 0/6:22:3,11,11,0,11,6,19,0,0,0,0,0:610.76 1/1:17:0,17,0,0,0,0,0,0,0,0,0,0:1356.73 1/5:33:0,12,20,0,8,21,0,0,0,0,0,0:2016.19 0/2:34:12,11,22,0,0,0,0,0,0,0,0,0:1548.73 1/4:17:0,7,0,0,10,0,0,0,0,0,0,0:395.19 7/7:29:0,0,14,0,0,16,10,29,0,0,0,0:1702.73 1/1:30:0,30,0,0,0,0,0,0,0,0,0,0:2342.73 0/7:33:24,0,14,0,0,16,10,9,0,0,0,0:550.73 5/6:29:0,11,11,0,11,9,20,0,0,0,0,0:763.19 0/0 6/7:40:0,0,14,0,0,16,21,19,0,0,0,0:1509.19 2/7:39:0,0,20,0,0,16,21,19,0,0,0,0:2664.19 0/0 1/2:26:0,7,19,0,0,0,0,0,0,0,0,0:2198.19 7/8:12:0,0,0,0,0,0,0,6,6,0,0,0:711.19 0/0 5/5:25:0,12,20,0,8,25,0,0,0,0,0,0:1306.73 0/2:44:19,7,25,0,0,0,0,0,0,0,0,0:1781.73 6/6:27:1,11,11,0,11,9,26,0,0,0,0,0:699.73 1/1:35:0,35,0,0,0,0,0,0,0,0,0,0:2399.73 1/2:52:0,23,29,0,0,0,0,0,0,0,0,0:3927.19 0/4:24:12,7,0,0,12,0,0,0,0,0,0,0:994.73 5/5:35:0,12,20,0,8,35,0,0,0,0,0,0:1595.73 0/0 2/2:43:0,23,43,0,0,0,0,0,0,0,0,0:3186.76 1/5:17:0,9,20,0,8,8,0,0,0,0,0,0:1002.19 0/2:19:7,23,12,0,0,0,0,0,0,0,0,0:930.73 0/8:27:19,0,0,0,0,0,0,6,8,0,0,0:435.73 0/5:33:18,9,20,0,8,15,0,0,0,0,0,0:603.73 0/0 5/7:28:0,0,20,0,0,14,21,14,0,0,0,0:781.19 2/7:23:0,0,14,0,0,14,21,9,0,0,0,0:1527.19 0/1:36:18,18,0,0,0,0,0,0,0,0,0,0:1302.73 0/4:42:21,7,0,0,21,0,0,0,0,0,0,0:1417.73 1/2:32:0,13,19,0,0,0,0,0,0,0,0,0:2431.19 5/5:21:0,9,20,0,8,21,0,0,0,0,0,0:893.52 0/6:34:5,11,11,0,11,9,29,0,0,0,0,0:1012.73 5/5:25:1,9,20,0,8,24,0,0,0,0,0,0:964.7 2/5:39:0,9,21,0,8,18,0,0,0,0,0,0:2673.19 1/1:32:0,32,0,0,0,0,0,0,0,0,0,0:2830.73 5/5:27:0,9,21,0,8,27,0,0,0,0,0,0:1181.73 4/8:14:0,0,0,0,8,0,0,6,6,0,0,0:624.19 11/11:18:0,0,0,0,0,0,0,0,0,0,0,18:1231.73 0/2:15:8,13,7,0,0,0,0,0,0,0,0,0:426.73 0/0 1/1:17:0,17,0,0,0,0,0,0,0,0,0,0:1600.73 0/2:37:16,13,21,0,0,0,0,0,0,0,0,0:1574.73 4/4:29:0,7,0,0,29,0,0,0,0,0,0,0:2027.73 2/4:25:0,7,16,0,9,0,0,0,0,0,0,0:2016.19 1/6:20:0,10,11,0,11,9,10,0,0,0,0,0:993.19 4/6:31:0,10,11,0,12,9,19,0,0,0,0,0:1241.19 2/5:23:0,9,10,0,8,13,0,0,0,0,0,0:1472.19 0/2:28:14,13,14,0,0,0,0,0,0,0,0,0:1058.73 1/1:31:0,31,0,0,0,0,0,0,0,0,0,0:2150.73 0/1:25:0,25,0,0,0,0,0,0,0,0,0,0:1996.76 1/1:20:0,20,0,0,0,0,0,0,0,0,0,0:1520.73 0/2:21:9,13,12,0,0,0,0,0,0,0,0,0:945.73 0/2:29:18,13,11,0,0,0,0,0,0,0,0,0:704.73 0/4:26:10,7,16,0,16,0,0,0,0,0,0,0:1200.73 6/6:20:0,10,11,0,12,9,20,0,0,0,0,0:458.74 0/2:19:9,13,10,0,0,0,0,0,0,0,0,0:714.73 1/1:12:0,12,0,0,0,0,0,0,0,0,0,0:674.73 2/5:33:0,9,18,0,8,15,0,0,0,0,0,0:1890.19 0/5:34:13,9,18,0,8,21,0,0,0,0,0,0:946.73 5/7:17:0,0,14,0,0,6,21,11,0,0,0,0:456.19 0/0 0/0 5/6:28:0,10,11,0,12,14,14,0,0,0,0,0:736.19 1/4:23:0,9,16,0,14,0,0,0,0,0,0,0:656.19 0/2:21:8,13,13,0,0,0,0,0,0,0,0,0:961.73 1/2:27:0,11,16,0,0,0,0,0,0,0,0,0:2038.19 1/6:32:0,16,11,0,12,14,16,0,0,0,0,0:1581.19 4/6:34:0,16,11,0,13,14,21,0,0,0,0,0:1402.19 6/6:32:0,16,11,0,13,14,32,0,0,0,0,0:912.73 2/7:29:0,0,14,0,0,6,21,15,0,0,0,0:2029.19 3/5:21:0,9,18,0,8,21,0,0,0,0,0,0:1006.73 0/2:22:5,11,17,0,0,0,0,0,0,0,0,0:1110.73 1/2:31:0,15,16,0,0,0,0,0,0,0,0,0:2211.19 0/5:23:2,9,18,0,8,21,0,0,0,0,0,0:1006.73 0/2:30:16,15,14,0,0,0,0,0,0,0,0,0:846.73 0/2:33:16,15,17,0,0,0,0,0,0,0,0,0:1154.73 1/4:19:0,9,16,0,10,0,0,0,0,0,0,0:457.19 1/6:22:0,11,11,0,13,14,11,0,0,0,0,0:1006.19 6/6:25:2,11,11,0,13,14,23,0,0,0,0,0:677.73 5/5:22:0,9,18,0,8,22,0,0,0,0,0,0:939.73";
			
			String[] split = joo.split("\\s");
			for(int i = 0 ; i<split.length; i++) {
				System.out.println(split[i].split(":")[0]);
			}
			/*
			File[] paths;
			FileSystemView fsv = FileSystemView.getFileSystemView();

			// returns pathnames for files and directory
			paths = File.listRoots();

			// for each pathname in pathname array
			for(File path:paths)
			{
				if(fsv.getSystemDisplayName(path).contains("merit")) {
					System.out.println(path);
				}
			    // prints file and directory paths
			  
			}
			/*
			
		String seq = "GGCGCCACCTTGTGGTT";
		String mutated ="GGTGCCACCTTGTGGTT";
		
		String pmf = "5423,2600,0,64,641,46,5823,87,0,37,10566,90,183,2,406,2660,4213;546,371,8052,0,9591,10107,5201,7091,8872,49,290,1616,5157,0,114,4936,3590;1733,11366,0,12480,8,0,207,0,1,23,1625,9828,0,8472,7463,143,2456;4208,632,505,86,46,0,241,3888,0,14151,1355,764,7952,121,2221,9766,1302";
			
		String[] split = pmf.split(";");
		String[] values = split[0].split(",");
		int[][] matrix = new int[4][values.length];
		
		for(int i = 1; i<4; i++) {
			for(int j = 0; j<values.length; j++) {
				matrix[i-1][j] = Integer.parseInt(values[j]);
			}
			values = split[i].split(",");
			
			
		}
		double sum;
		HashMap<Character, Integer> map = new HashMap<Character, Integer>();
		HashMap<Character, Double> background = new HashMap<Character, Double>();
		map.put('A', 0);
		map.put('C', 1);
		map.put('G', 2);
		map.put('T', 3);		
		background.put('A', 0.3);
		background.put('C', 0.2);
		background.put('G', 0.2);
		background.put('T', 0.3);		
		Double value, total = 0.0, mutTotal = 0.0;
		double pseudocount = 0.8;
		double mutatedvalue;
		
		for(int j = 0; j<matrix[0].length; j++) {
		try {
			sum = matrix[0][j] + matrix[1][j] +matrix[2][j] +matrix[3][j];
			
			value = matrix[map.get(seq.charAt(j))][j]/(double)sum;
			mutatedvalue = matrix[map.get(mutated.charAt(j))][j]/(double)sum;
			if(value == 0) {
				value = pseudocount;
				
			}
			if(mutatedvalue == 0) {
				mutatedvalue = pseudocount;
			}
			value = value*Math.log(value/background.get(seq.charAt(j)));
			mutatedvalue = mutatedvalue*Math.log(mutatedvalue/background.get(mutated.charAt(j)));
			total +=value;
			mutTotal += mutatedvalue;
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		}
		System.out.println(mutTotal-total);
		
			*/
		}
		
		
	/*	public static void getConsSeq(String position, String bamfile ) {
			String[] pos = position.split(":");
			String chrom = pos[0];
			String breakpoint = pos[1];			
			File sample = new File(bamfile);
			
			ReadNode read;
		
			int minpos = Integer.MAX_VALUE, maxpos = 0;
			ArrayList<Object[]> readlist = new ArrayList<Object[]>();
			
			for(int i = 0; i<readsample.getreadHash().get(split).getReads().size();i++)  {
				
				read = readsample.getreadHash().get(split).getReads().get(i);
				do {
					if(read.getPosition() < centerpos && read.getPosition()+read.getWidth() > centerpos) {
						if(read.getMismatches() != null && read.getMismatches().size() > 10) {
							if(read.getPosition() < minpos) {
								minpos = read.getPosition();
							}
							if(read.getPosition()+read.getWidth() > maxpos) {
								maxpos = read.getPosition()+read.getWidth();
							}
							SAMRecord readsam = Main.fileReader.getRead(chromosomeDropdown.getSelectedItem().toString(),read.getPosition(), read.getPosition()+read.getWidth(),read.getName(), readsample.getreadHash().get(split));
							
							Object[] adder = {read.getPosition(), readsam.getReadString()};
							readlist.add(adder);
						}
					}
				
				}
				while ((read = read.getNext()) != null);				
			}
			
			int[][] matrix = new int[5][maxpos-minpos];
			
			for(int i = 0 ; i<5;i++) {
				for(int j = 0;j<maxpos-minpos;j++) {
					matrix[i][j] = 0;
				}
			}
			for(int i = 0 ; i<readlist.size();i++) {
				for(int j =0; j<readlist.get(i)[1].toString().length(); j++) {		
					
					matrix[baseMap.get(""+(readlist.get(i)[1].toString().charAt(j)))-1][(int)readlist.get(i)[0]-minpos+j]++;
				}
			}
			StringBuffer buffer = new StringBuffer("");//readsample.getName() +"\nPosition: " +chromosomeDropdown.getSelectedItem().toString() +":" +MethodLibrary.formatNumber(minpos) +"\nBreak point: " +chromosomeDropdown.getSelectedItem().toString() +":" +MethodLibrary.formatNumber(centerpos) +"\n" );
	
			read = null;
		
			buffer.append(">" +sample.getName() +"|BP="+position  +" (LeftPosition=" +chrom +":" +MethodLibrary.formatNumber(minpos) +")\n");
			int max=0,maxindex=0;
			String[] bases = {"A","C","G","T"};
			StringBuffer fasta = new StringBuffer("");
			for(int j =0; j<maxpos-minpos; j++) {
				max = 0;
				maxindex = 0;
				for(int i = 0; i<4; i++) {
					if(matrix[i][j] > max ) {
						max = matrix[i][j];
						maxindex = i;
					}
					else if(max > 0 && matrix[i][j] == max) {
						max = 0;
						maxindex = -1;
					}
				}
				if(maxindex > -1) {
					fasta.append(bases[maxindex]);
				}
				else {
					fasta.append("N");
				}
			}
			buffer.append(fasta.toString());
			System.out.println(buffer.toString());
	
		  
		}
		public static void makeBasemap() {
			baseMap.put("A", 1);
			baseMap.put("C", 2);
			baseMap.put("G", 3);
			baseMap.put("T", 4);
			baseMap.put("N", 5);
		}*/
}
